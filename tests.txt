*** Settings ***
Resource   lib/stormlib.txt
Resource   lib/dcache.txt
Resource   lib/lcg_util.txt

*** Test Cases ***

Ping using clientSRM
  ${output}  Execute clientSRM Command  ping
  Should contain  ${output}  SRM server successfully contacted
	
Ping using the dCache client
  ${output}  Ping using dCache client
  Should Contain  ${output}  StoRM
	
List files in storage area root
  Execute clientSRM Command on Surl  ls  srm://${srmEndpoint}/${root} -c 1

Create a directory using clientSRM
  ${dirName}  Get a unique name
  Create directory using clientSRM  ${dirName}
  Remove directory using clientSRM  ${dirName}
	
Create a directory using the dCache client
  ${dirName}  Get a unique name
  Create directory using dCache client  ${dirName}
  Remove directory using clientSRM  ${dirName}
	
Create a directory that already exists using clientSRM
  ${dirName}  Get a unique name
  Create directory using clientSRM  ${dirName}
  ${output}  Try to create directory using clientSRM  ${dirName}
  Should Contain  ${output}  SRM_DUPLICATION_ERROR
  Should Contain  ${output}  Directory specified exists!
	[Teardown]  Remove directory using clientSRM  ${dirName}

Create a directory that already exists using the dCache client
  ${dirName}  Get a unique name
  Create directory using clientSRM  ${dirName}
  ${output}  Try to create directory using dCache client  ${dirName}
  Should Contain  ${output}  SRM_DUPLICATION_ERROR
  Should Contain  ${output}  Directory specified exists!
  [Teardown]  Remove directory using clientSRM  ${dirName}
	
Check double PtG on a file
  ${test_file}  Run  echo "test."`date "+%s"`
  Put without really putting  /  ${test_file}
  Prepare to get  ${test_file}
  Prepare to get  ${test_file}

Check right failure code when invoking PtP/PtP on the same file
  ${test_file}  Run  echo "test."`date "+%s"`
  Prepare to put  /  ${test_file}
  ${output}  Execute clientSRM Command on Surl  PtP -p  srm://${srmEndpoint}/${root}/${test_file}
  Log  ${output}
  Should Contain  ${output}  SRM_FILE_BUSY

Check right failure code when invoking PtP/pd/PtP on the same file
  ${test_file}  Run  echo "test."`date "+%s"`
  ${token}  Put without really putting  /  ${test_file}
  ${output}  Execute clientSRM Command on Surl  PtP -p  srm://${srmEndpoint}/${root}/${test_file}
  Should Contain  ${output}  SRM_DUPLICATION_ERROR

Check if StoRM publishes correctly values for used and free space on the BDII
  ${test_file}  Create local file
  Check file does not exists using lcg-utils  ${test_file}
  Copy-out file using lcg-utils  ${test_file}  ${test_file}
  ${size_before}  Get unused size  ${storageAreaToken}
  Log  ${size_before}
  Check file exists using lcg-utils  ${test_file}
  Execute clientSRM Command  rm -e httpg://${srmEndpoint}/ -s srm://${srmEndpoint}/srm/managerv2?SFN=/${root}/${test_file}
  Check file does not exists using lcg-utils  ${test_file}
  ${size_after}  Get unused size  ${storageAreaToken}
  Log  ${size_after}
  ${diff_size}  Run  echo `expr ${size_after} - ${size_before}`
  ${file_size}  Run  ls -l /tmp/${test_file} | awk {'print $5'}
  Should be equal  ${file_size}  ${diff_size}

List files in an existing directory
  ${dirName}  Get a unique name
  Create directory using clientSRM  ${dirName}
  ${fileName}  Get a unique name
  Put without really putting  ${dirName}  ${fileName}
  ${output}  List files in directory using lcg_utils  ${dirName}
  Should Contain  ${output}  ${fileName}
  ${output}  List files in directory using clientSRM  ${dirName}
  Should Contain  ${output}  ${fileName}
  [Teardown]  Remove directory using clientSRM  ${dirName}

Verify gtp operation by using the StoRM client
  ${output}  Execute clientSRM Command  gtp
  Should Contain  ${output}  transferProtocol="file"
  Should Contain  ${output}  transferProtocol="gsiftp"
  Should Contain  ${output}  transferProtocol="http"
  Should Contain  ${output}  transferProtocol="https"
  Should Contain  ${output}  transferProtocol="rfio"
  Should Contain  ${output}  transferProtocol="root"

Copy out a file using lcg-utils
  ${test_file}  Create local file
  Check file does not exists using lcg-utils  ${test_file}
  Copy-out file using lcg-utils  ${test_file}  ${test_file}
  Copy-in file using lcg-utils  ${test_file}  ${test_file}_copied
  Execute and check success  diff /tmp/${test_file} /tmp/${test_file}_copied
  [Teardown]  Remove File  /tmp/${test_file} /tmp/${test_file}_copied
