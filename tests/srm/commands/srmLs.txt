*** Settings ***
Resource   lib/stormlib.txt
Resource   lib/clientSRM.txt
Resource   lib/credentials.txt
Resource   lib/lcg_util.txt

Resource   lib/setup.txt

Suite Setup       Setup suite if needed
Suite Teardown    Teardown suite if needed

*** Test Cases ***

List files in storage area root
  [Tags]  storm-client  ls
  [Setup]  Use certificate and proxy  test0  ${VOMSAUTH_SA_PROXY}
  ${surl}  Build surl  ${VOMSAUTH_SA}  ${EMPTY}
  ${output}  Perform ls using clientSRM  ${surl}  -c 1
  Should Contain  ${output}  SRM_SUCCESS
  [Teardown]  Clear all credentials

List existent directory
  [Tags]  storm-client  ls
  [Setup]  Use certificate and proxy  test0  ${VOMSAUTH_SA_PROXY}
  ${dirname}  Get a unique name
  ${surlDir}  Build surl  ${VOMSAUTH_SA}  ${TESTDIR}/${dirname}
  ${output}  Perform mkdir using clientSRM  ${surlDir}
  Should Contain  ${output}  SRM_SUCCESS
  ${output}  Perform ls using clientSRM  ${surlDir}
  Should Contain  ${output}  SRM_SUCCESS
  Should Contain  ${output}  path="/${VOMSAUTH_SA}/${TESTDIR}/${dirname}"
  Should Contain  ${output}  size=0
  ${fileName}  Get a unique name
  ${surlFile}  Build surl  ${VOMSAUTH_SA}  ${TESTDIR}/${dirname}/${fileName}
  Put without really putting using clientSRM  ${surlFile}
  ${output}  Perform ls using clientSRM  ${surlDir}
  Should Contain  ${output}  SRM_SUCCESS
  Should Contain  ${output}  path="/${VOMSAUTH_SA}/${TESTDIR}/${dirname}"
  Should Contain  ${output}  path="/${VOMSAUTH_SA}/${TESTDIR}/${dirname}/${filename}"
  Should Contain  ${output}  size=1
  ${output}  Perform rmdir using clientSRM  ${surlDir}  -r
  Should Contain  ${output}  SRM_SUCCESS
  [Teardown]  Clear all credentials

List unexistent directory
  [Tags]  storm-client  ls
  [Setup]  Use certificate and proxy  test0  ${VOMSAUTH_SA_PROXY}
  ${dirname}  Get a unique name
  ${surl}  Build surl  ${VOMSAUTH_SA}  ${TESTDIR}/${dirname}
  ${output}  Perform ls using clientSRM  ${surl}
  Should Contain  ${output}  SRM_FAILURE
  Should Contain  ${output}  SRM_INVALID_PATH
  Should Contain  ${output}  path="/${VOMSAUTH_SA}/${TESTDIR}/${dirname}"
  Should Not Contain  ${output}  size=0
  [Teardown]  Clear all credentials

List existent file
  [Tags]  storm-client  ls
  [Setup]  Use certificate and proxy  test0  ${VOMSAUTH_SA_PROXY}
  ${filename}  Create local file
  ${surl}  Build surl  ${VOMSAUTH_SA}  ${TESTDIR}/${filename}
  Copy-out file using lcg-utils  ${filename}  ${surl}
  ${output}  Perform ls using clientSRM  ${surl}
  Should Contain  ${output}  SRM_SUCCESS
  Should Contain  ${output}  path="/${VOMSAUTH_SA}/${TESTDIR}/${filename}"
  log  ${output}
  Should Contain  ${output}  size=1048576
  Should Not Contain  ${output}  size=0
  ${output}  Perform rm using clientSRM  ${surl}
  Should Contain  ${output}  SRM_SUCCESS
  Remove local file  ${filename}
  [Teardown]  Clear all credentials

List unexistent file
  [Tags]  storm-client  ls
  [Setup]  Use certificate and proxy  test0  ${VOMSAUTH_SA_PROXY}
  ${filename}  Get a unique name
  ${surl}  Build surl  ${VOMSAUTH_SA}  ${TESTDIR}/${filename}
  ${output}  Perform ls using clientSRM  ${surl}
  Should Contain  ${output}  SRM_FAILURE
  Should Contain  ${output}  SRM_INVALID_PATH
  Should Contain  ${output}  path="/${VOMSAUTH_SA}/${TESTDIR}/${filename}"
  Should Not Contain  ${output}  size=0
  [Teardown]  Clear all credentials

Full detailed list of existent directory
  [Tags]  storm-client  ls
  [Setup]  Use certificate and proxy  test0  ${VOMSAUTH_SA_PROXY}
  ${dirname}  Get a unique name
  ${surl}  Build surl  ${VOMSAUTH_SA}  ${TESTDIR}/${dirname}
  ${output}  Perform mkdir using clientSRM  ${surl}
  Should Contain  ${output}  SRM_SUCCESS
  ${output}  Perform ls using clientSRM  ${surl}  -l 1 -n 1
  Should Contain  ${output}  SRM_SUCCESS
  Should Contain  ${output}  path="/${VOMSAUTH_SA}/${TESTDIR}/${dirname}"
  Should Contain  ${output}  size=0
  Should Contain  ${output}  ownerPermission
  Should Contain  ${output}  groupPermission
  Should Contain  ${output}  type=Directory
  Should Contain  ${output}  lastModificationTime
  ${output}  Perform rmdir using clientSRM  ${surl}
  Should Contain  ${output}  SRM_SUCCESS
  [Teardown]  Clear all credentials

Full detailed list of existent file
  [Tags]  storm-client  ls
  [Setup]  Use certificate and proxy  test0  ${VOMSAUTH_SA_PROXY}
  ${filename}  Create local file
  ${surl}  Build surl  ${VOMSAUTH_SA}  ${TESTDIR}/${filename}
  Copy-out file using lcg-utils  ${filename}  ${surl}
  ${output}  Perform ls using clientSRM  ${surl}  -l 1 -n 0
  Should Contain  ${output}  SRM_SUCCESS
  Should Contain  ${output}  path="/${VOMSAUTH_SA}/${TESTDIR}/${filename}"
  Should Contain  ${output}  size
  Should Not Contain  ${output}  size=0
  Should Contain  ${output}  ownerPermission
  Should Contain  ${output}  groupPermission
  Should Contain  ${output}  type=File
  Should Contain  ${output}  lastModificationTime
  Should Contain  ${output}  lifetimeAssigned
  Should Contain  ${output}  lifetimeLeft
  Should Contain  ${output}  fileLocality
  ${output}  Perform rm using clientSRM  ${surl}
  Should Contain  ${output}  SRM_SUCCESS
  Remove local file  ${filename}
  [Teardown]  Clear all credentials

Full detailed and recursive list of existent files and directories
  [Tags]  storm-client  ls
  [Setup]  Use certificate and proxy  test0  ${VOMSAUTH_SA_PROXY}
  ${filename}  Create local file
  ${dirname}  Get a unique name
  ${dirsurl}  Build surl  ${VOMSAUTH_SA}  ${TESTDIR}/${dirname}
  ${filesurl}  Build surl  ${VOMSAUTH_SA}  ${TESTDIR}/${dirname}/${filename}
  ${subdirsurl}  Build surl  ${VOMSAUTH_SA}  ${TESTDIR}/${dirname}/${dirname}
  ${subdirfilesurl}  Build surl  ${VOMSAUTH_SA}  ${TESTDIR}/${dirname}/${dirname}/${filename}
  ${output}  Perform mkdir using clientSRM  ${dirsurl}
  Should Contain  ${output}  SRM_SUCCESS
  ${output}  Perform mkdir using clientSRM  ${subdirsurl}
  Should Contain  ${output}  SRM_SUCCESS
  Copy-out file using lcg-utils  ${filename}  ${filesurl}
  Copy-out file using lcg-utils  ${filename}  ${subdirfilesurl}
  ${output}  Perform ls using clientSRM  ${dirsurl}  -r -l 1
  Should Contain  ${output}  SRM_SUCCESS
  Should Contain  ${output}  path="/${VOMSAUTH_SA}/${TESTDIR}/${dirname}"
  Should Contain  ${output}  path="/${VOMSAUTH_SA}/${TESTDIR}/${dirname}/${filename}"
  Should Contain  ${output}  path="/${VOMSAUTH_SA}/${TESTDIR}/${dirname}/${dirname}"
  Should Contain  ${output}  path="/${VOMSAUTH_SA}/${TESTDIR}/${dirname}/${dirname}/${filename}"
  Should Contain  ${output}  size
  Should Contain  ${output}  ownerPermission
  Should Contain  ${output}  groupPermission
  Should Contain  ${output}  type=File
  Should Contain  ${output}  lastModificationTime
  Should Contain  ${output}  lifetimeAssigned
  Should Contain  ${output}  lifetimeLeft
  Should Contain  ${output}  fileLocality
  ${output}  Perform rmdir using clientSRM  ${dirsurl}  -r
  Should Contain  ${output}  SRM_SUCCESS
  Remove local file  ${filename}
  [Teardown]  Clear all credentials

Ls on a surl that points to another storage area
  [Tags]  storm-client  ls
  [Setup]  Use certificate and proxy  test0  ${VOMSAUTH_SA_PROXY}
  ${qsurl}  Build surl  ${vo2}  ../${VOMSAUTH_SA}
  ${ssurl}  Build simple surl  ${vo2}  ../${VOMSAUTH_SA}
  ${output}  Perform ls using clientSRM  ${qsurl}
  Should Contain  ${output}  SRM_AUTHORIZATION_FAILURE
  ${output}  Perform ls using clientSRM  ${ssurl}
  Should Contain  ${output}  SRM_AUTHORIZATION_FAILURE
  [Teardown]  Clear all credentials

Ls on a surl with a valid dots segment
  [Tags]  storm-client  ls
  [Setup]  Use certificate and proxy  test0  ${VOMSAUTH_SA_PROXY}
  ${dirname}  Get a unique name
  ${dirname2}  Get a unique name
  ${surl}  Build surl  ${VOMSAUTH_SA}  ${TESTDIR}/${dirname}
  ${surl2}  Build surl  ${VOMSAUTH_SA}  ${TESTDIR}/${dirname2}
  ${surl3}  Build surl  ${VOMSAUTH_SA}  ${TESTDIR}/${dirname}/../${dirname2}
  ${output}  Perform mkdir using clientSRM  ${surl}
  Should Contain  ${output}  SRM_SUCCESS
  ${output}  Perform mkdir using clientSRM  ${surl2}
  Should Contain  ${output}  SRM_SUCCESS
  ${output}  Perform ls using clientSRM  ${surl3}
  Should Contain  ${output}  SRM_SUCCESS
  ${output}  Perform rmdir using clientSRM  ${surl}
  Should Contain  ${output}  SRM_SUCCESS
  ${output}  Perform rmdir using clientSRM  ${surl2}
  Should Contain  ${output}  SRM_SUCCESS
  [Teardown]  Clear all credentials

Ls on a surl with a valid dots segment with simple surls
  [Tags]  storm-client  ls
  [Setup]  Use certificate and proxy  test0  ${VOMSAUTH_SA_PROXY}
  ${dirname}  Get a unique name
  ${dirname2}  Get a unique name
  ${surl}  Build simple surl  ${VOMSAUTH_SA}  ${TESTDIR}/${dirname}
  ${surl2}  Build simple surl  ${VOMSAUTH_SA}  ${TESTDIR}/${dirname2}
  ${surl3}  Build simple surl  ${VOMSAUTH_SA}  ${TESTDIR}/${dirname}/../${dirname2}
  ${output}  Perform mkdir using clientSRM  ${surl}
  Should Contain  ${output}  SRM_SUCCESS
  ${output}  Perform mkdir using clientSRM  ${surl2}
  Should Contain  ${output}  SRM_SUCCESS
  ${output}  Perform ls using clientSRM  ${surl3}
  Should Contain  ${output}  SRM_SUCCESS
  ${output}  Perform rmdir using clientSRM  ${surl}
  Should Contain  ${output}  SRM_SUCCESS
  ${output}  Perform rmdir using clientSRM  ${surl2}
  Should Contain  ${output}  SRM_SUCCESS
  [Teardown]  Clear all credentials

Ls on a surl that points to a reserved area
  [Tags]  storm-client  ls
  [Setup]  Use certificate and proxy  test0  ${VOMSAUTH_SA_PROXY}
  ${surl}  Build surl  ${VOMSAUTH_SA}  ../../etc/grid-security
  ${output}  Perform ls using clientSRM  ${surl}
  Should Not Contain  ${output}  SRM_SUCCESS
  Should Contain  ${output}  SRM_INTERNAL_ERROR
  ${surl}  Build simple surl  ${VOMSAUTH_SA}  ../../etc/grid-security
  ${output}  Perform ls using clientSRM  ${surl}
  Should Not Contain  ${output}  SRM_SUCCESS
  Should Contain  ${output}  SRM_INTERNAL_ERROR
  [Teardown]  Clear all credentials

Ls on some symlinks that point to other storage-areas
  [Tags]  storm-client  ls
  [Setup]  Use certificate and proxy  test0  ${VOMSAUTH_SA_PROXY}
  ${symlinkSURL}  Build surl  ${VOMSAUTH_SA}  ${VOMS_TO_VOMS}
  ${output}  Perform ls using clientSRM  ${symlinkSURL}
  Should Contain  ${output}  SRM_FAILURE
  Should Contain  ${output}  SRM_AUTHORIZATION_FAILURE
  Should Not Contain  ${output}  SRM_SUCCESS
  Log  ${output}
  ${symlinkSURL2}  Build surl  ${VOMSAUTH_SA}  ${VOMS_TO_ANONYMOUS}
  ${output}  Perform ls using clientSRM  ${symlinkSURL2}
  Should Contain  ${output}  SRM_SUCCESS
  Log  ${output}
  [Teardown]  Clear all credentials

Check approached VFS with nested accesspoints
  [Tags]  ls  lcg-utils  nested  storm-client
  [Setup]  Use certificate and proxy  test0  ${NESTED_SA_PROXY}
  ${dirname}  Get a unique name
  ${filename}  Create local file
  ${surlDir}  Build surl  ${NESTED_SA}  ${TESTDIR}/${dirname}
  ${surlFile}  Build surl  ${NESTED_SA}  ${TESTDIR}/${dirname}/${filename}
  ${output}  Perform mkdir using clientSRM  ${surlDir}
  Should Contain  ${output}  SRM_SUCCESS
  Copy-out file using lcg-utils  ${filename}  ${surlFile}
  ${output}  Perform ls using clientSRM  ${surlDir}
  Should Contain  ${output}  SRM_SUCCESS
  Should Contain  ${output}  ${NESTED_SA}/${TESTDIR}/${dirname}
  Should Contain  ${output}  ${NESTED_SA}/${TESTDIR}/${dirname}/${filename}
  [Teardown]  Clear all credentials