*** Settings ***
Resource   lib/stormlib.txt
Resource   lib/clientSRM.txt
Resource   lib/globus_util.txt
Resource   lib/credentials.txt

*** Test Cases ***

Prepare to put of unexistent file
  [Tags]  storm-client  ptp
  [Setup]  Init certificate and voms proxy  test0  ${vo}
  ${filename}  Get a unique name
  ${surl}  Build surl  ${vo}  ${filename}
  ${output}  ${token}  Perform ptp using clientSRM  ${surl}  -p
  Should Contain  ${output}  SRM_SPACE_AVAILABLE
  ${output}  Perform pd using clientSRM  ${surl}  ${token}
  Perform rm using clientSRM  ${surl}
  Remove local file  ${filename}
  [Teardown]  Clear all credentials

Prepare to put on a file already put without overwrite
  [Tags]  storm-client  ptp
  [Setup]  Init certificate and voms proxy  test0  ${vo}
  ${filename}  Create local file
  ${surl}  Build surl  ${vo}  ${filename}
  ${output}  ${token}  Perform ptp using clientSRM  ${surl}  -p
  Copy-out file using globus-utils  ${filename}  ${vo}  ${filename}
  ${output}  Perform pd using clientSRM  ${surl}  ${token}  -p
  ${output}  ${token}  Perform ptp using clientSRM  ${surl}  -p
  Should Contain  ${output}  SRM_FAILURE
  Should Contain  ${output}  SRM_DUPLICATION_ERROR
  Should Contain  ${output}  Cannot srmPut file because it already exists!
  Perform rm using clientSRM  ${surl}
  Remove local file  ${filename}
  [Teardown]  Clear all credentials

Prepare to put on a file already put with overwrite
  [Tags]  storm-client  ptp
  [Setup]  Init certificate and voms proxy  test0  ${vo}
  ${filename}  Get a unique name
  ${surl}  Build surl  ${vo}  ${filename}
  ${output}  ${token}  Perform ptp using clientSRM  ${surl}  -p
  Should Contain  ${output}  SRM_SPACE_AVAILABLE
  ${output}  Perform pd using clientSRM  ${surl}  ${token}
  Should Contain  ${output}  SRM_SUCCESS
  ${output}  ${token}  Perform ptp using clientSRM  ${surl}  -p -w 1
  Should Contain  ${output}  SRM_SPACE_AVAILABLE
  ${output}  Perform pd using clientSRM  ${surl}  ${token}
  Should Contain  ${output}  SRM_SUCCESS
  Perform rm using clientSRM  ${surl}
  Remove local file  ${filename}
  [Teardown]  Clear all credentials

Prepare to put of an unexistant file with a wrong protocol
  [Documentation]  Regression test for https://storm.cnaf.infn.it:8443/redmine/issues/127
  [Tags]  storm-client  regression
  [Setup]  Init certificate and voms proxy  test0  ${vo}
  ${filename}  Get a unique name
  ${surl}  Build surl  ${vo}  ${filename}
  ${output}  ${token}  Perform ptp using clientSRM  ${surl}  -p -T -P unknown_protocol
  Should Contain  ${output}  SRM_NOT_SUPPORTED
  Remove local file  ${filename}
  [Teardown]  Clear all credentials

Prepare to put using a non existent space token
  [Tags]  regression  ptp
  [Documentation]  Regression test for https://storm.cnaf.infn.it:8443/redmine/issues/282. StoRM used to return the wrong error (SRM_SPACE_LIFETIME_EXPIRED instead of SRM_INVALID_REQUEST) for a sptp when a ptp was given a non existent space token.
  [Setup]  Init certificate and voms proxy  test0  ${vo}
  ${filename}  Get a unique name
  ${surl}  Build surl  ${vo}  ${filename}
  ${output}  ${token}  Perform ptp using clientSRM  ${surl}  -p -t whatever
  ${output}  Perform sptp using clientSRM  ${surl}  ${token}
  Should Contain  ${output}  SRM_INVALID_REQUEST
  Should Contain  ${output}  The provided Space Token does not exists
  Remove local file  ${filename}
  [Teardown]  Clear all credentials

Prepare to put with sa token as space token
  [Tags]  regression  ptp
  [Documentation]  Regression test for https://storm.cnaf.infn.it:8443/redmine/issues/354 A call of the srmPrepareToPut command providing the space token parameter of a storage area fails.
  [Setup]  Init certificate and voms proxy  test0  ${vo}
  ${sp_token}  Get space token using clientSRM
  ${fileName}  Get a unique name
  ${surl}  Build surl  ${vo}  ${filename}
  ${output}  ${token}  Perform ptp using clientSRM  ${surl}  -p -t ${sp_token}
  Should Contain  ${output}  SRM_SPACE_AVAILABLE
  ${output}  Perform pd using clientSRM  ${surl}  ${token}  -p
  Should Contain  ${output}  SRM_SUCCESS
  Remove file using clientSRM  ${vo}  ${filename}
  Remove local file  ${filename}
  [Teardown]  Clear all credentials

Prepare to put with expectedFileSize not empty
  [Tags]  regression  ptp
  [Documentation]  Regression test for https://issues.infn.it/jira/browse/STOR-306 StoRM returns NULL fileSize for ptp with expected size
  [Setup]  Init certificate and voms proxy  test0  ${vo}
  ${fileName}  Get a unique name
  ${surl}  Build surl  ${vo}  ${filename}
  ${surl_with_size}  Catenate  SEPARATOR=,  ${surl}  12345
  ${output}  ${token}  Perform ptp using clientSRM  ${surl_with_size}  -p
  Should Contain  ${output}  SRM_SPACE_AVAILABLE
  Should Contain  ${output}  fileSize=12345
  ${output}  Perform pd using clientSRM  ${surl}  ${token}  -p
  Should Contain  ${output}  SRM_SUCCESS
  Remove file using clientSRM  ${vo}  ${filename}
  Remove local file  ${filename}
  [Teardown]  Clear all credentials

Prepare to put multiple surls
  [Tags]  storm-client  ptp
  [Setup]  Init certificate and voms proxy  test0  ${vo}
  ${testdir}  Get a unique name
  ${dirsurl}  Build surl  ${vo}  ${testdir}
  ${output}  Perform mkdir using clientSRM  ${dirsurl}
  Should Contain  ${output}  SRM_SUCCESS
  ${filename}  Get a unique name
  ${surl}  Build surl  ${vo}  ${testdir}/${filename}_1
  ${surllist} =  Set Variable  ${surl}
  :FOR  ${index}  IN RANGE  2  10
  \		${surl}  Build surl  ${vo}  ${testdir}/${filename}_${index}
  \		${surllist}  Catenate  ${surllist}  ${surl}
  Log  ${surllist}
  ${output}  ${token}  Perform ptp using clientSRM  ${surllist}  -p
  Log  ${output}
  Should Contain  ${output}  SRM_SUCCESS
  Should Not Contain  ${output}  SRM_FAILURE
  ${output}  Perform sptp using clientSRM  ${surllist}  ${token}
  Log  ${output}
  Should Contain  ${output}  SRM_SUCCESS
  Should Contain  ${output}  SRM_SPACE_AVAILABLE
  Should Not Contain  ${output}  SRM_FAILURE
  ${output}  Perform pd using clientSRM  ${surllist}  ${token}
  Log  ${output}
  Should Contain  ${output}  SRM_SUCCESS
  Should Not Contain  ${output}  SRM_FAILURE
  Perform rmdir using clientSRM  ${dirsurl}  -r
  Should Contain  ${output}  SRM_SUCCESS
  Remove local file  ${filename}
  Remove local directory  ${testdir}
  [Teardown]  Clear all credentials

Check right failure code when invoking PtP/PtP on the same file
  [Tags]   regression  ptp
  [Setup]  Init certificate and voms proxy  test0  ${vo}
  ${filename}  Get a unique name
  ${surl}  Build surl  ${vo}  ${filename}
  ${output}  ${token}  Perform ptp using clientSRM  ${surl}  -p
  Should Contain  ${output}  SRM_SPACE_AVAILABLE
  ${output}  ${token}  Perform ptp using clientSRM  ${surl}  -p
  Log  ${output}
  Should Contain  ${output}  SRM_FILE_BUSY
  Perform rm using clientSRM  ${surl}
  Remove local file  ${filename}
  [Teardown]  Clear all credentials

Check right failure code when invoking PtP/pd/PtP on the same file
  [Tags]   regression  ptp  pd
  [Setup]  Init certificate and voms proxy  test0  ${vo}
  ${filename}  Get a unique name
  Put without really putting using clientSRM  ${vo}  ${filename}
  ${surl}  Build surl  ${vo}  ${filename}
  ${output}  ${token}  Perform ptp using clientSRM  ${surl}  -p
  Should Contain  ${output}  SRM_DUPLICATION_ERROR
  Perform rm using clientSRM  ${surl}
  Remove local file  ${filename}
  [Teardown]  Clear all credentials