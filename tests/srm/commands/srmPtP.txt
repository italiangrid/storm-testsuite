*** Settings ***
Resource   lib/stormlib.txt
Resource   lib/clientSRM.txt
Resource   lib/globus_util.txt
Resource   lib/credentials.txt

Resource   lib/setup.txt

Suite Setup       Setup suite if needed
Suite Teardown    Teardown suite if needed

*** Test Cases ***

Prepare to put of unexistent file
  [Tags]  storm-client  ptp
  [Setup]  Use certificate and proxy  test0  ${VOMSAUTH_SA_PROXY}
  ${filename}  Get a unique name
  ${surl}  Build surl  ${VOMSAUTH_SA}  ${TESTDIR}/${filename}
  ${output}  ${token}  Perform ptp using clientSRM  ${surl}  -p
  Should Contain  ${output}  SRM_SPACE_AVAILABLE
  ${output}  Perform pd using clientSRM  ${surl}  ${token}
  Should Contain  ${output}  SRM_SUCCESS
  ${output}  Perform rm using clientSRM  ${surl}
  Should Contain  ${output}  SRM_SUCCESS
  Remove local file  ${filename}
  [Teardown]  Clear all credentials

Prepare to put without overwrite when target file exists
  [Tags]  storm-client  ptp
  [Setup]  Use certificate and proxy  test0  ${VOMSAUTH_SA_PROXY}
  ${filename}  Get a unique name
  ${surl}  Build surl  ${VOMSAUTH_SA}  ${TESTDIR}/${filename}
  Put without really putting using clientSRM  ${surl}
  ${output}  ${token}  Perform ptp using clientSRM  ${surl}  -p
  Should Contain  ${output}  SRM_FAILURE
  Should Contain  ${output}  SRM_DUPLICATION_ERROR
  Should Contain  ${output}  Cannot srmPut file because it already exists!
  ${output}  Perform rm using clientSRM  ${surl}
  Should Contain  ${output}  SRM_SUCCESS
  [Teardown]  Clear all credentials

Prepare to put with overwrite
  [Tags]  storm-client  ptp
  [Setup]  Use certificate and proxy  test0  ${VOMSAUTH_SA_PROXY}
  ${filename}  Get a unique name
  ${surl}  Build surl  ${VOMSAUTH_SA}  ${TESTDIR}/${filename}
  Put without really putting using clientSRM  ${surl}
  ${output}  ${token}  Perform ptp using clientSRM  ${surl}  -p -w 1
  Should Contain  ${output}  SRM_SPACE_AVAILABLE
  ${output}  Perform pd using clientSRM  ${surl}  ${token}
  Should Contain  ${output}  SRM_SUCCESS
  ${output}  Perform rm using clientSRM  ${surl}
  Should Contain  ${output}  SRM_SUCCESS
  [Teardown]  Clear all credentials

Prepare to put specifying a wrong transfer protocol
  [Documentation]  Regression test for https://storm.cnaf.infn.it:8443/redmine/issues/127
  [Tags]  storm-client  regression
  [Setup]  Use certificate and proxy  test0  ${VOMSAUTH_SA_PROXY}
  ${filename}  Get a unique name
  ${surl}  Build surl  ${VOMSAUTH_SA}  ${TESTDIR}/${filename}
  ${output}  ${token}  Perform ptp using clientSRM  ${surl}  -p -T -P unknown_protocol
  Should Contain  ${output}  SRM_NOT_SUPPORTED
  [Teardown]  Clear all credentials

Prepare to put using a non existent space token
  [Tags]  regression  ptp
  [Documentation]  Regression test for https://storm.cnaf.infn.it:8443/redmine/issues/282. StoRM used to return the wrong error (SRM_SPACE_LIFETIME_EXPIRED instead of SRM_INVALID_REQUEST) for a sptp when a ptp was given a non existent space token.
  [Setup]  Use certificate and proxy  test0  ${VOMSAUTH_SA_PROXY}
  ${filename}  Get a unique name
  ${surl}  Build surl  ${VOMSAUTH_SA}  ${TESTDIR}/${filename}
  ${output}  ${token}  Perform ptp using clientSRM  ${surl}  -p -t whatever
  Should Contain  ${output}  SRM_INVALID_REQUEST
  ${output}  Perform sptp using clientSRM  ${surl}  ${token}
  Should Contain  ${output}  SRM_INVALID_REQUEST
  Should Contain  ${output}  The provided Space Token does not exists
  [Teardown]  Clear all credentials

Prepare to put with sa token as space token
  [Tags]  regression  ptp
  [Documentation]  Regression test for https://storm.cnaf.infn.it:8443/redmine/issues/354 A call of the srmPrepareToPut command providing the space token parameter of a storage area fails.
  [Setup]  Use certificate and proxy  test0  ${VOMSAUTH_SA_PROXY}
  ${sp_token}  Get space token using clientSRM  ${VOMSAUTH_SA_TOKEN}
  ${fileName}  Get a unique name
  ${surl}  Build surl  ${VOMSAUTH_SA}  ${TESTDIR}/${filename}
  ${output}  ${token}  Perform ptp using clientSRM  ${surl}  -p -t ${sp_token}
  Should Contain  ${output}  SRM_SPACE_AVAILABLE
  ${output}  Perform pd using clientSRM  ${surl}  ${token}  -p
  Should Contain  ${output}  SRM_SUCCESS
  ${output}  Perform rm using clientSRM  ${surl}
  Should Contain  ${output}  SRM_SUCCESS
  [Teardown]  Clear all credentials

Prepare to put with expectedFileSize not empty
  [Tags]  regression  ptp
  [Documentation]  Regression test for https://issues.infn.it/jira/browse/STOR-306 StoRM returns NULL fileSize for ptp with expected size
  [Setup]  Use certificate and proxy  test0  ${VOMSAUTH_SA_PROXY}
  ${fileName}  Get a unique name
  ${surl}  Build surl  ${VOMSAUTH_SA}  ${TESTDIR}/${filename}
  ${surl_with_size}  Catenate  SEPARATOR=,  ${surl}  12345
  ${output}  ${token}  Perform ptp using clientSRM  ${surl_with_size}  -p
  Should Contain  ${output}  SRM_SPACE_AVAILABLE
  Should Contain  ${output}  fileSize=12345
  ${output}  Perform pd using clientSRM  ${surl}  ${token}  -p
  Should Contain  ${output}  SRM_SUCCESS
  ${output}  Perform rm using clientSRM  ${surl}
  Should Contain  ${output}  SRM_SUCCESS
  [Teardown]  Clear all credentials

Prepare to put multiple surls
  [Tags]  storm-client  ptp
  [Setup]  Use certificate and proxy  test0  ${VOMSAUTH_SA_PROXY}
  ${dirname}  Get a unique name
  ${dirsurl}  Build surl  ${VOMSAUTH_SA}  ${TESTDIR}/${dirname}
  ${output}  Perform mkdir using clientSRM  ${dirsurl}
  Should Contain  ${output}  SRM_SUCCESS
  ${filename}  Get a unique name
  ${surl}  Build surl  ${VOMSAUTH_SA}  ${TESTDIR}/${dirname}/${filename}_1
  ${surllist} =  Set Variable  ${surl}
  :FOR  ${index}  IN RANGE  2  10
  \		${surl}  Build surl  ${VOMSAUTH_SA}  ${TESTDIR}/${dirname}/${filename}_${index}
  \		${surllist}  Catenate  ${surllist}  ${surl}
  Log  ${surllist}
  ${output}  ${token}  Perform ptp using clientSRM  ${surllist}  -p
  Log  ${output}
  Should Contain  ${output}  SRM_SUCCESS
  Should Not Contain  ${output}  SRM_FAILURE
  ${output}  Perform sptp using clientSRM  ${surllist}  ${token}
  Log  ${output}
  Should Contain  ${output}  SRM_SUCCESS
  Should Contain  ${output}  SRM_SPACE_AVAILABLE
  Should Not Contain  ${output}  SRM_FAILURE
  ${output}  Perform pd using clientSRM  ${surllist}  ${token}
  Log  ${output}
  Should Contain  ${output}  SRM_SUCCESS
  Should Not Contain  ${output}  SRM_FAILURE
  ${output}  Perform rmdir using clientSRM  ${dirsurl}  -r
  Should Contain  ${output}  SRM_SUCCESS
  [Teardown]  Clear all credentials

Check right failure code when invoking PtP/PtP on the same file
  [Tags]   regression  ptp
  [Setup]  Use certificate and proxy  test0  ${VOMSAUTH_SA_PROXY}
  ${filename}  Get a unique name
  ${surl}  Build surl  ${VOMSAUTH_SA}  ${TESTDIR}/${filename}
  ${output}  ${token1}  Perform ptp using clientSRM  ${surl}  -p
  Should Contain  ${output}  SRM_SPACE_AVAILABLE
  ${output}  ${token2}  Perform ptp using clientSRM  ${surl}  -p
  Log  ${output}
  Should Contain  ${output}  SRM_FILE_BUSY
  ${output}  Perform abort request using clientSRM  ${token1}
  Should Contain  ${output}  SRM_SUCCESS
  [Teardown]  Clear all credentials

Check right failure code when invoking PtP/pd/PtP on the same file
  [Tags]   regression  ptp  pd
  [Setup]  Use certificate and proxy  test0  ${VOMSAUTH_SA_PROXY}
  ${filename}  Get a unique name
  ${surl}  Build surl  ${VOMSAUTH_SA}  ${TESTDIR}/${filename}
  Put without really putting using clientSRM  ${surl}
  ${output}  ${token}  Perform ptp using clientSRM  ${surl}  -p
  Should Contain  ${output}  SRM_DUPLICATION_ERROR
  ${output}  Perform rm using clientSRM  ${surl}
  Should Contain  ${output}  SRM_SUCCESS
  [Teardown]  Clear all credentials