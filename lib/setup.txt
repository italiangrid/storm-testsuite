*** Settings ***

Resource   lib/stormlib.txt
Resource   lib/clientSRM.txt
Resource   lib/credentials.txt
Resource   lib/webdav.txt

*** Keywords ***

Get timestamp
  ${output}  Execute and Check Success  date +"%k%M%S%d%m%Y"
  [Return]  ${output}

Get uid
  ${output}  Execute and Check Success  id -u
  [Return]  ${output}

Set Variable If It Does Not Exist  [Arguments]  ${name}  ${value}
  ${status}  ${message} =  Run Keyword And Ignore Error  Variable Should Exist  ${name}
  Run Keyword If  "${status}" == "FAIL"  Set Global Variable  ${name}  ${value}

Set global variables
  ${timestamp}  Get timestamp
  ${uid}  Get uid
  Set Variable If It Does Not Exist  \${TESTDIR}  storm-testsuite_${timestamp.strip()}
  Set Variable If It Does Not Exist  \${X509AUTH_SA_PROXY}  /tmp/${TESTDIR}/testersgridproxy
  Set Variable If It Does Not Exist  \${VOMSAUTH_SA_PROXY}  /tmp/${TESTDIR}/testersvomsproxy
  Set Variable If It Does Not Exist  \${NESTED_SA_PROXY}  /tmp/${TESTDIR}/testersvomsproxy
  Set Variable If It Does Not Exist  \${ALIASED_SA_PROXY}  /tmp/${TESTDIR}/testersvomsproxy
  Set Variable If It Does Not Exist  \${DEFAULT_X509_USER_PROXY}  /tmp/x509up_u${uid}
  Log  ${TESTDIR}
  Log  ${X509AUTH_SA_PROXY}
  Log  ${VOMSAUTH_SA_PROXY}
  Log  ${DEFAULT_X509_USER_PROXY}

Init local working directory
  Create local directory  ${TESTDIR}
  ${x509up}  Get Environment Variable  X509_USER_PROXY
  Log  ${x509up}
  Clear all credentials
  Use certificate  test0
  Create voms proxy  ${VOMSAUTH_SA_VONAME}
  Execute and Check Success  cp ${x509up} ${VOMSAUTH_SA_PROXY}
  Create plain proxy
  Execute and Check Success  cp ${x509up} ${X509AUTH_SA_PROXY}
  Clear all credentials

Init remote working directories
  Clear all credentials
  Use certificate  test0
  Use proxy  ${VOMSAUTH_SA_PROXY}
  Create remote working directory  ${VOMSAUTH_SA}
  Create remote working directory  ${NESTED_SA}
  Create remote working directory  ${ANONYMOUS_SA}
  Use proxy  ${X509AUTH_SA_PROXY}
  Create remote working directory  ${X509AUTH_SA}
  Clear all credentials

Create remote working directory  [Arguments]  ${storageArea}
  ${surl}  Build surl  ${storageArea}  ${TESTDIR}
  ${output}  Perform mkdir using clientSRM  ${surl}
  Log  ${output}

Clear remote working directory  [Arguments]  ${storageArea}
  ${surl}  Build surl  ${storageArea}  ${TESTDIR}
  ${output}  Perform rmdir using clientSRM  ${surl}  -r
  Log  ${output}

Clear all directories
  Clear all credentials
  Use certificate  test0
  Use proxy  ${VOMSAUTH_SA_PROXY}
  Clear remote working directory  ${VOMSAUTH_SA}
  Clear remote working directory  ${ANONYMOUS_SA}
  Clear remote working directory  ${NESTED_SA}
  Use proxy  ${X509AUTH_SA_PROXY}
  Clear remote working directory  ${X509AUTH_SA}
  Clear all credentials
  Remove local directory  ${TESTDIR}

Setup suite
  Set global variables
  Init local working directory
  Init remote working directories
  Set Global Variable  ${STARTED}  true

Do setup
  Setup suite
  Set Suite Variable  ${DOTEARDOWN}  true

Setup suite if needed
  ${status}  ${message} =  Run Keyword And Ignore Error  Variable Should Exist  ${STARTED}
  Run Keyword If  "${status}" == "FAIL"  Do setup

Teardown suite
  Clear all directories

Teardown suite if needed
  ${status}  ${message} =  Run Keyword And Ignore Error  Variable Should Exist  ${DOTEARDOWN}
  Run Keyword If  "${status}" == "PASS"  Teardown suite