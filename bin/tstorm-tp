#!/usr/bin/python

__author__ = 'Elisabetta Ronchieri'

import sys
import unittest
import getopt
from tstorm.utils import settings as st
from tstorm.test import commontests as ct
from tstorm.test import basictests as bt
from tstorm.test import basictests_novoms as btnv
from tstorm.test import tapetests as tt
from tstorm.test import regressiontests as rt

def usage():
    print "Usage:  python testsutie.py [-c|--conf] [-d|--destfile] [--novoms]"
    print """Example: python testsutie.py -c tstorm.ini -d /qui/quo/qua --novoms"""

if __name__ == '__main__':
  tfn = './etc/tstorm/tstorm.ini'

  try:
    opts, args = getopt.getopt(sys.argv[1:], "hc:d:", ["help","novoms","conf","destfile"])
  except getopt.GetoptError, err:
    print str(err)
    usage()
    sys.exit(2)

  voms = True
  n_df = False
  n_dfn = ''
  for o, v in opts:
    if o in ("-h", "--help"):
      usage()
      sys.exit()
    elif o in ("-c", "--conf"):
      tfn = v
    elif o in ("-d", "--destfile"):
      n_dfn = v
      n_df = True
    elif o in ("--novoms"):
      novoms = False
    else:
      assert False, "unhandled option"

  if voms:
    '''Common Tests, Mandatory for each other type of tests'''
    ifn,dfn,back_ifn= st.set_inpt_fn(n_df,n_dfn)
    runner = unittest.TextTestRunner(verbosity=2).run(ct.conf_test_suite(tfn,ifn,dfn,back_ifn))

    '''Basic Tests'''
    ifn,dfn,back_ifn= st.set_inpt_fn(n_df,n_dfn)
    runner = unittest.TextTestRunner(verbosity=2).run(bt.cs_test_suite(tfn,ifn,dfn,back_ifn))
    ifn,dfn,back_ifn= st.set_inpt_fn(n_df,n_dfn)
    runner = unittest.TextTestRunner(verbosity=2).run(bt.cw_test_suite(tfn,ifn,dfn,back_ifn))
    ifn,dfn,back_ifn= st.set_inpt_fn(n_df,n_dfn)
    runner = unittest.TextTestRunner(verbosity=2).run(bt.cksm_test_suite(tfn,ifn,dfn,back_ifn))
    ifn,dfn,back_ifn= st.set_inpt_fn(n_df,n_dfn)
    runner = unittest.TextTestRunner(verbosity=2).run(bt.dt_test_suite(tfn,ifn,dfn,back_ifn))
    ifn,dfn,back_ifn= st.set_inpt_fn(n_df,n_dfn)
    runner = unittest.TextTestRunner(verbosity=2).run(bt.https_voms_test_suite(tfn,ifn,dfn,back_ifn))

    '''Tape Tests'''
    #ifn,dfn,back_ifn= st.set_inpt_fn(n_df,n_dfn,subdir=False)
    #runner = unittest.TextTestRunner(verbosity=2).run(tt.access_tape(tfn,ifn,dfn,back_ifn))

    '''Regression Tests'''
    #ifn,dfn,back_ifn= st.set_inpt_fn(n_df,n_dfn,subdir=False)
    #runner = unittest.TextTestRunner(verbosity=2).run(rt.update_free_space_upon_rm(tfn,ifn,dfn,back_ifn))

    #ifn,dfn,back_ifn= st.set_inpt_fn(n_df,n_dfn,subdur=False)
    #runner = unittest.TextTestRunner(verbosity=2).run(rt.eight_digit_string_checksum_rts(tfn,ifn,dfn,back_ifn))

    #ifn,dfn,back_ifn= st.set_inpt_fn(n_df,n_dfn,subdir=False)
    #runner = unittest.TextTestRunner(verbosity=2).run(rt.update_used_space_upon_pd(tfn,ifn,dfn,back_ifn))

    #ifn,dfn,back_ifn= st.set_inpt_fn(n_df,n_dfn,subdir=False)
    #runner = unittest.TextTestRunner(verbosity=2).run(rt.unsupported_protocols(tfn,ifn,dfn,back_ifn))

    #runner = unittest.TextTestRunner(verbosity=2).run(rt.glue_information(tfn))

    #ifn,dfn,back_ifn= st.set_inpt_fn(n_df,n_dfn,subdir=False)
    #runner = unittest.TextTestRunner(verbosity=2).run(rt.non_ascii_chars(tfn,ifn,dfn,back_ifn))

    #ifn,dfn,back_ifn= st.set_inpt_fn(n_df,n_dfn,subdir=False)
    #runner = unittest.TextTestRunner(verbosity=2).run(rt.protocols(tfn,ifn,dfn,back_ifn))

  else:
    '''Basic Tests NO VOMS'''
    ifn,dfn,back_ifn= st.set_inpt_fn(n_df,n_dfn,subdir=False)
    runner = unittest.TextTestRunner(verbosity=2).run(btnv.http_test_suite(tfn,ifn,dfn,back_ifn))
    ifn,dfn,back_ifn= st.set_inpt_fn(n_df,n_dfn,subdir=False)
    runner = unittest.TextTestRunner(verbosity=2).run(btnv.https_test_suite(tfn,ifn,dfn,back_ifn))
