#!/usr/bin/python

__author__ = 'Elisabetta Ronchieri'

import sys
import unittest
import getopt
from tstorm.utils import settings as st
from tstorm.test import commontests as ct
from tstorm.test import basictests as bt
from tstorm.test import basictests_novoms as btnv
from tstorm.test import tapetests as tt
from tstorm.test import regressiontests as rt

methods = {
   'cksm_ts': 'bt.cksm_ts(tfn,ifn,dfn,back_ifn)', 
   'https_ts': 'btnv.https_ts(tfn,ifn,dfn,back_ifn)', 
   'https_voms_ts': 'bt.https_voms_ts(tfn,ifn,dfn,back_ifn)', 
   'cs_ts': 'bt.cs_ts(tfn,ifn,dfn,back_ifn)', 
   'cw_ts': 'bt.cw_ts(tfn,ifn,dfn,back_ifn)', 
   'eight_digit_string_checksum_ts': 'rt.eight_digit_string_checksum_ts(tfn,ifn,dfn,back_ifn)', 
   'non_ascii_chars_ts': 'rt.non_ascii_chars_ts(tfn,ifn,dfn,back_ifn)', 
   'unsupported_protocols_ts': 'rt.unsupported_protocols_ts(tfn,ifn,dfn,back_ifn)', 
   'dt_ts': 'bt.dt_ts(tfn,ifn,dfn,back_ifn)', 
   'http_ts': 'btnv.http_ts(tfn,ifn,dfn,back_ifn)', 
   'glue_info_ts': 'rt.glue_info_ts(tfn)', 
   'update_used_space_upon_pd_ts': 'rt.update_used_space_upon_pd_ts(tfn,ifn,dfn,back_ifn)', 
   'update_free_space_upon_rm_ts': 'rt.update_free_space_upon_rm_ts(tfn,ifn,dfn,back_ifn)', 
   'protocols_ts': 'rt.protocols_ts(tfn,ifn,dfn,back_ifn)',
   'conf_ts': 'ct.conf_ts(tfn,ifn,dfn,back_ifn)',
   'access_tape_ts': 'tt.access_tape_ts(tfn,ifn,dfn,back_ifn)'
}

tests_type = {
   'novoms':'basic_tests_novoms',
   'voms':['common_tests',
       'basic_tests',
       'regression_tests',
       'tape_tests']
}

def run_tests(tpi,tt, n_df, n_dfn):
   kw='test_plan'
   if tt in tpi[kw]:
     if tt in tpi.keys():
       for y in tpi[tt]:
         if tt == 'regression_tests':
           sd=False
         else:
           sd=True
         ifn,dfn,back_ifn= st.set_inpt_fn(n_df,n_dfn,subdir=sd)
         m=methods[y]
         runner = unittest.TextTestRunner(verbosity=2).run(eval(m))

def usage():
    print "Usage:  python tstorm-tp [-c|--conf] [-d|--destfile] [--novoms]"
    print """Example: python tstorm-tp -c tstorm.ini -d /qui/quo/qua --novoms"""

def tpc_details():
    print "Description of tstorm-tp.json.template:"
    print """test_plan - is a key word containing a list of different type of """
    print """            system tests that MUST be specified in the order of """
    print """            execution, that is """
    print """            ["""
    print """             'common_tests'"""
    print """             'basic_tests'"""
    print """             'regression_tests'"""
    print """             'basic_tests_tests'"""
    print """             'tape_tests'"""
    print """            ]"""
    print """common_tests - is a key word containing a list of tests """
    print """               that MUST be specified in the order of execution; """
    print """basic_tests - is a key word containing a list of tests """
    print """               that MUST be specified in the order of execution; """
    print """regression_tests - is a key word containing a list of tests """
    print """               that MUST be specified in the order of execution; """
    print """basic_tests_novoms - is a key word containing a list of tests """
    print """               that MUST be specified in the order of execution; """
    print """tape_tests - is a key word containing a list of tests """
    print """               that MUST be specified in the order of execution\n"""
    print "Example of tstorm-tp.json.template:"
    print """
{
  "basic_tests": [
    "cs_ts",
    "cw_ts",
    "cksm_ts",
    "dt_ts",
    "https_voms_ts"
  ],
  "basic_tests_novoms": [
    "http_ts",
    "https_ts"
  ],
  "common_tests": [
    "conf_ts"
  ],
  "regression_tests": [
    "update_free_space_upon_rm_ts",
    "eight_digit_string_checksum_rts_ts",
    "update_used_space_upon_pd_ts",
    "unsupported_protocols_ts",
    "glue_info_ts",
    "non_ascii_chars_ts",
    "protocols_ts"
  ],
  "tape_tests": [
    "access_tape_ts"
  ],
  "test_plan": [
    "common_tests",
    "basic_tests",
    "regression_tests",
    "basic_tests_novoms",
    "tape_tests"
  ]
}
"""

if __name__ == '__main__':
  tpfnc= './etc/tstorm/tstorm-tp.json'
  tfn = './etc/tstorm/tstorm.ini'

  try:
    opts, args = getopt.getopt(sys.argv[1:], "hc:d:", ["help","novoms","conf","destfile"])
  except getopt.GetoptError, err:
    print str(err)
    usage()
    sys.exit(2)

  voms = True
  n_df = False
  n_dfn = ''
  for o, v in opts:
    if o in ("-h", "--help"):
      usage()
      sys.exit()
    elif o in ("-c", "--conf"):
      tfn = v
    elif o in ("-d", "--destfile"):
      n_dfn = v
      n_df = True
    elif o in ("--novoms"):
      novoms = False
    else:
      assert False, "unhandled option"

  '''Get Test Plan Info from conf file'''
  tp_info = st.get_tp_info(tpfnc)

  if not st.is_valid(tp_info):
    '''Wrong Test Plan conf file'''
    tpc_details()
    sys.exit(3)

  if voms:
    for x in tests_type['voms']:
      run_tests(tp_info, x, n_df, n_dfn)
  else:
    '''Basic Tests NO VOMS'''
    for x in tests_type['novoms']:
      run_tests(tp_info, x, n_df, n_dfn)
