#!/usr/bin/python

__author__ = 'Elisabetta Ronchieri'

import sys
import unittest
import getopt
from tstorm.utils import reportfile as rf
from tstorm.utils import settings as st
from tstorm.utils import check_testplan as ctp
from tstorm.test import commontests as cts
from tstorm.test import basictests as bt
from tstorm.test import basictests_novoms as btnv
from tstorm.test import tapetests as tt
from tstorm.test import regressiontests as rt
from tstorm.test import regressiontests_novoms as rtnv
from tstorm.test import regression_conftests as rct
from tstorm.test import regression_ldaptests as rlt

def run_tests(tpi, uid, lfn, tt, n_df, n_dfn):
    info=ctp.CheckTestplan()
    kw=info.get_key_word()
    methods=info.get_methods()
    if tt in tpi[kw]:
        if tt in tpi.keys():
            for y in tpi[tt]:
	            if tt == 'regression_tests' or y in ('https_ts', 'https_voms_ts', 'http_ts'):
	                sd=False
	            else:
	                sd=True
	            if tt != 'regression_conftests':
	                ifn,dfn,back_ifn= st.set_inpt_fn(n_df,n_dfn,subdir=sd)
	            m=methods[y]
                    runner = unittest.TextTestRunner(verbosity=2).run(eval(m))

def usage():
    print "Usage: tstorm-tp [-c|--conf] [-d|--destfile] [--noreport] [--novoms] [--conftest]"
    print """Example: if you want to run test without voms"""
    print """         tstorm-tp --novoms"""
    print """Example: if you want to run conf test on a given storm node"""
    print """         tstorm-tp --conftest"""
    print """Example: if you want to run test by changing conf input file and destination filename"""
    print """         tstorm-tp -c etc/tstorm/tstorm.ini -d ui/uo/ua.txt"""

def tpj_details():
    print "Description of tstorm-tp.json.template:"
    print """test_plan - is a key word containing a list of different type of """
    print """            system tests that MUST be specified in the following """
    print """            order of execution, that is """
    print """            ["""
    print """             'common_tests',"""
    print """             'basic_tests',"""
    print """             'regression_tests',"""
    print """             'basic_tests_novoms',"""
    print """             'regression_tests_novoms',"""
    print """             'regression_conftests',"""
    print """             'regression_ldaptests',"""
    print """             'tape_tests'"""
    print """            ]"""
    print """            regression_conftests are executed only if conftest option is used."""
    print """common_tests         - is a key word containing a list of tests that is"""
    print """                       mandatory for all the other tests with the """
    print """                       exclusion of regression conf tests and"""
    print """                       regression ldap tests"""
    print """basic_tests          - is a key word containing a list of tests;"""
    print """regression_tests     - is a key word containing a list of tests;"""
    print """regression_conftests - is a key word containing a list of tests """
    print """                       that MUST run as root;"""
    print """regression_ldaptests - is a key word containing a list of tests;"""
    print """basic_tests_novoms   - is a key word containing a list of tests; """
    print """tape_tests           - is a key word containing a list of tests.\n """
    print "Example of tstorm-tp.json.template:\n"
    st.print_tpj_template('./etc/tstorm/tstorm-tp.json.template')

if __name__ == '__main__':
    tpjfnc= './etc/tstorm/tstorm-tp.json'
    tfn = './etc/tstorm/tstorm.ini'
    test_id_map = './etc/tstorm/map_test_id.json'

    try:
        opts, args = getopt.getopt(sys.argv[1:], "hc:d:", ["help","noreport","novoms","conftest","conf","destfile"])
    except getopt.GetoptError, err:
        print str(err)
        usage()
        sys.exit(2)

    ct=False
    voms = True
    report = True
    n_df = False
    n_dfn = ''
    for o, v in opts:
        if o in ("-h", "--help"):
            usage()
            sys.exit()
        elif o in ("-c", "--conf"):
            tfn = v
        elif o in ("-d", "--destfile"):
            n_dfn = v
            n_df = True
        elif o in ("--novoms"):
            voms = False
        elif o in ("--noreport"):
            noreport = False
        elif o in ("--conftest"):
            ct = True
        else:
            assert False, "unhandled option"

    '''Get Test Plan Info from conf file'''
    tpj_info = st.get_tpj_info(tpjfnc)
    '''Get Test Id Mapping Info from file'''
    mti_info =  st.get_tpj_info(test_id_map)

    if not st.is_valid(tpj_info):
        '''Wrong Test Plan conf file'''
        tpj_details()
        sys.exit(3)

    logf=rf.ReportFile(report = report)

    tests_type = ctp.CheckTestplan().get_tests_type()

    if ct:
        for x in tests_type['conf']:
          run_tests(tpj_info, mti_info, logf, x, n_df, n_dfn)
    else:
        if voms:
            for x in tests_type['voms']:
                run_tests(tpj_info, mti_info, logf, x, n_df, n_dfn)
        else:
            for x in tests_type['novoms']:
                run_tests(tpj_info, mti_info, logf, x, n_df, n_dfn)

    logf.close_file() 

  
