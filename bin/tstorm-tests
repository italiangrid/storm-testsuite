#!/usr/bin/python

__author__ = 'Elisabetta Ronchieri'

import sys
import unittest
import getopt

from tstorm.utils import report_file 
from tstorm.utils import settings
from tstorm.utils import filters_checks
from tstorm.utils import tests_info
from tstorm.utils import tests_methods
from tstorm.utils import configuration

from tstorm.tests import commontests as cts
from tstorm.tests.atomic import atomicstests as at
from tstorm.tests.functional import functionalitiestests as ft
from tstorm.tests.functional import functionalitiestests_novoms as ftnv
from tstorm.tests.functional import tapetests as tt
from tstorm.tests.functional.regression import regressiontests as rt
from tstorm.tests.functional.regression import regressiontests_novoms as rtnv

def run_tests(tpi, uid, lfn, tt, n_df, n_dfn):
    sd=True
    if tpi[1]:
        sd=False
    elif 'ts_https' in tpi[2]:
        sd=False
    elif 'ts_http' in tpi[2]:
        sd=False
    elif 'ts_https_voms' in tpi[2]:
        sd=False
    ifn,dfn,back_ifn= settings.set_inpt_fn(n_df,n_dfn,subdir=sd)
    if tpi[2] != "":
        runner = unittest.TextTestRunner(verbosity=2).run(eval(tpi[2]))

def usage():
    print """Usage: tstorm-tests [-h|--help] [-v|--version] [-c|--conf] """
    print """                    [-d|--destfile] [-i|--ids] [-f|--file-ids] """
    print """                    [--noreport] [--novoms]"""
    print """                    [-s|--filter-list] [-l|--list]"""
    print """                    [-r|--storm-release]"""
    print """where:"""
    print """- version, noreport, novoms and list are not followed by any"""
    print """  values"""
    print """- conf, destfile, storm-release and file-ids are followed by """
    print """  a value """
    print """- ids is followed by a sequence of id values separated by , """
    print """  and between '"""
    print """- filter-list is followed by a sequence of values separated """
    print """  by ; and between ', the values of which are"""
    print """  t|test=sequence of types of tests separated by , as """
    print """      (AT,UT,ST,DT) that filters in relation with the """
    print """      the type of test"""
    print """  r|regression=false|true that expresses if the test """
    print """      belongs to the regression category"""
    print """  idenpotent=false|true that expresses if the test belongs """
    print """      to the idenpotent category"""
    print """  o|output=filename that allows user to save ids in the """
    print """      specified filename"""
    print """  f|format=n|name,d|description,range,rfc,i|id,idenpotent that """
    print """      allows user to specify the order of print of test """
    print """      information""",
    print """Example: if you want to run tests without producing a report"""
    print """      tstorm-tests --noreport"""
    print """Example: if you want to run tests providing tests sequence"""
    print """      tstorm-tests -i '<id1>, <id2>, ...'"""
    print """Example: if you want to get tests information providing a """
    print """filter"""
    print """      tstorm-tests --filter-list 't=AT,UT,ST;regression=true;f=n,d,rfc,id"""
    
if __name__ == '__main__':
    tfn = 'tstorm.ini'

    try:
        opts, args = getopt.getopt(sys.argv[1:],
            "hvlc:d:i:f:s:r:",
            ["help","noreport","novoms","list", "conf=","destfile=",
            "ids=","file-ids=","version","filter-list=",
            "storm-release="])
    except getopt.GetoptError, err:
        print str(err)
        usage()
        sys.exit(2)

    ct=False
    voms = True
    report = True
    custom_destination_file = (False, '')
    tests_sequence = (False, [])
    tests_sequence_file = (False, '')
    list_tests_details = (False, {})
    filter_tests_details = (False, {})
    storm_release = __import__('tstorm').get_storm_release().replace('-','.')

    for opt, value in opts:
        if opt in ("-h", "--help"):
            usage()
            sys.exit()
        elif opt in ("-v", "--version"):
            print 'T-StoRM version %s' % (__import__('tstorm').get_version())
            sys.exit()
        elif opt in ("-c", "--conf"):
            tfn = value
        elif opt in ("-d", "--destfile"):
            custom_destination_file = (True, value)
        elif opt in ("-i", "--ids"):
            tests_sequence = (True, [x.strip() for x in value.split(',')])
        elif opt in ("-f", "--file-ids"):
            tests_sequence_file = (True, value)
        elif opt in ("-l", "--list"):
            list_tests_details = (True, {})            
        elif opt in ("-s", "--filter-list"):
            tmp_filter_tests_details = filters_checks.FiltersChecks(value).get_filters()
            filter_tests_details = (True, tmp_filter_tests_details)
        elif opt in ("-r", "--storm-release"):
            storm_release = value.replace('-','.')
        elif opt in ("--novoms"):
            voms = False
        elif opt in ("--noreport"):
            report = False
        else:
            assert False, "unhandled option"

    if settings.configuration_file_exists(file_name = 'map_tests_ids.json'):
        '''Get Test Id Mapping Info from file'''
        mti_info =  settings.get_json_file_information(file_name = 'map_tests_ids.json')
    else:
        print '''Include map-tests-ids.json file in the right locations'''
        sys.exit(4)

    if list_tests_details[0]:
        tests_info.TestsInfo(mti_info, storm_release).get_system_info()
        sys.exit(0)

    if filter_tests_details[0]:
        tests_info.TestsInfo(mti_info, storm_release, \
            info=filter_tests_details[1]).get_system_info()
        sys.exit(0)

    if tests_sequence_file[0]:
        if settings.file_exists(tests_sequence_file[1]):
            tests_sequence = (True,
                tests_sequence[1] + settings.get_tests_sequence(tests_sequence_file[1]))
        else:
            print '''File that contains tests sequence does not exist'''
            sys.exit(6)

    if tests_sequence[0]:
        if not settings.is_tests_sequence_valid(tests_sequence[1],
            mti_info.values()):
            print '''Wrong Tests Sequence %s'''
            sys.exit(7)

    if settings.configuration_file_exists(file_name = tfn):
        tfn = settings.get_configuration_file(file_name = tfn)
    else:
        print '''Include ini file in the right locations'''
        sys.exit(5)

    check_configuration_file = configuration.LoadConfiguration(conf_file = tfn)
    if not check_configuration_file.is_configuration_file_valid():
        print '''Wrong Test Configuration file'''
        print '''Example of ini configuration file:\n'''
        check_configuration_file.print_configuration_file_template()
        sys.exit(3)

    log_file = report_file.ReportFile(report = report)

    if tests_sequence[0]:
        tests_methods = tests_methods.TestsMethods(mti_info, sequence = tests_sequence[1])
    else:
        tests_methods = tests_methods.TestsMethods(mti_info)

    for key, value in tests_methods.get_system_methods().items():
        run_tests(value, mti_info, log_file, key,
            custom_destination_file[0], custom_destination_file[1])

    log_file.close_file() 

  
