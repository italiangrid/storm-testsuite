#!/usr/bin/python

__author__ = 'Elisabetta Ronchieri'

import sys
import unittest
import getopt
from tstorm.utils import report_file
from tstorm.utils import settings
from tstorm.utils import check_testplan 
from tstorm.utils import configuration
from tstorm.tests.deployment.regression import regression_conftests as rct
from tstorm.tests.deployment.regression import regression_ldaptests as rlt

def run_tests(tpi, uid, lfn, tt, n_df, n_dfn):
    info = check_testplan.CheckTestplan()
    key_word = info.get_key_word()
    methods = info.get_methods()

    if tt in tpi[key_word]:
        if tt in tpi.keys():
            for y in tpi[tt]:
	        #if tt == 'regression_tests' or y in ('https_ts', 'https_voms_ts', 'http_ts'):
	        #    sd=False
	        #else:
	        sd=True
	        if tt != 'regression_conftests':
	            ifn,dfn,back_ifn= settings.set_inpt_fn(n_df,n_dfn,subdir=sd)
	        m=methods[y]
                runner = unittest.TextTestRunner(verbosity=2).run(eval(m))

def usage():
    print "Usage: tstorm-sanity-tests [-c|--conf] [--noreport]"
    print """Example: if you want to run test by changing conf input file"""
    print """         tstorm-sanity-tests -c etc/tstorm/tstorm-sanity.ini"""

def json_file_details():
    print "Description of tstorm-sanity-tp.json.template:"
    print """test_plan - is a key word containing a list of different type of """
    print """            system tests that MUST be specified in the following """
    print """            order of execution, that is """
    print """            ["""
    print """             'regression_conftests',"""
    print """             'regression_ldaptests'"""
    print """            ]"""
    print """regression_conftests are executed only if conftest option is used."""
    print """regression_ldaptests - is a key word containing a list of tests;"""
    print "Example of tstorm-sanity-tp.json.template:\n"
    settings.print_json_file_template('tstorm-sanity-tp.json.template')

if __name__ == '__main__':
    tfn = 'tstorm-sanity.ini'
    
    try:
        opts, args = getopt.getopt(sys.argv[1:], "hc:", ["help","noreport","conf"])
    except getopt.GetoptError, err:
        print str(err)
        usage()
        sys.exit(2)

    report = True
    n_df = False
    n_dfn = ''
    for o, v in opts:
        if o in ("-h", "--help"):
            usage()
            sys.exit()
        elif o in ("-c", "--conf"):
            tfn = v
        elif o in ("--noreport"):
            report = False
        else:
            assert False, "unhandled option"

    if settings.configuration_file_exists(file_name = tfn):
        tfn = settings.get_configuration_file(file_name = tfn)
    else:
        print '''Include ini file in the right locations'''
        sys.exit(5)

    check_configuration_file = configuration.LoadConfiguration(conf_file = tfn)
    if not check_configuration_file.is_configuration_file_valid():
        print "Wrong Test Configuration file"
        print "Example of ini configuration file:\n"
        check_configuration_file.print_configuration_file_template()
        sys.exit(3)
        
    if settings.configuration_file_exists(file_name = 'tstorm-sanity-tp.json'):
        '''Get Test Plan Info from conf file'''
        tpj_info = settings.get_json_file_information(file_name = 'tstorm-sanity-tp.json')
    else:
        print '''Include tstorm-tp.json file in the right locations'''
        sys.exit(4)

    if settings.configuration_file_exists(file_name = 'map_tests_ids.json'):
        '''Get Test Id Mapping Info from file'''
        mti_info =  settings.get_json_file_information(file_name = 'map_tests_ids.json')
    else:
        print '''Include map-tests-ids.json file in the right locations'''
        sys.exit(4)

    if not settings.is_json_file_valid(tpj_info):
        print "Wrong Test Plan conf file"
        json_file_details()
        sys.exit(3)

    log_file = report_file.ReportFile(report = report)

    tests_type = check_testplan.CheckTestplan().get_tests_type()

    for test in tests_type['conf']:
        run_tests(tpj_info, mti_info, log_file, test, n_df, n_dfn)

    log_file.close_file() 
